<?php

namespace Test\Ease;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-17 at 09:50:39.
 */
class SandTest extends AtomTest
{

    /**
     * @var Sand
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new \Ease\Sand;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Ease\Sand::addStatusMessage
     */
    public function testAddStatusMessage()
    {
        $this->object->addStatusMessage('Message1');
        $messages = $this->object->getStatusMessages();
        $this->assertEquals($messages, ['info' => [1 => 'Message1']]);
    }

    /**
     * @covers Ease\Sand::getStatusMessages
     */
    public function testGetStatusMessages()
    {
        $this->object->addStatusMessage('Message2');
        $messages = $this->object->getStatusMessages();
        $this->assertEquals($messages, ['info' => [1 => 'Message1', 2 => 'Message2']]);
    }

    /**
     * @covers Ease\Sand::cleanMessages
     * @todo   Implement testCleanMessages().
     */
    public function testCleanMessages()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\Sand::attachObject
     */
    public function testAttachObject()
    {
        $this->object->attachObject('user', new \stdClass);
        $this->assertEquals(new \stdClass, $this->object->user);
    }

    /**
     * @covers Ease\Sand::setObjectName
     */
    public function testSetObjectName()
    {
        $this->object->setObjectName('Testing');
        $this->assertEquals('Testing', $this->object->getObjectName());
        $this->object->setObjectName();
        $this->assertEquals(get_class($this->object), $this->object->getObjectName());
    }

    /**
     * @covers Ease\Sand::getObjectName
     */
    public function testGetObjectName()
    {
        $this->assertNotEmpty($this->object->getObjectName());
    }

    /**
     * @covers Ease\Sand::setObjectIdentity
     */
    public function testSetObjectIdentity()
    {
        $this->object->setObjectIdentity(['myKeyColumn' => 'index_key']);
    }

    /**
     * @covers Ease\Sand::saveObjectIdentity
     */
    public function testSaveObjectIdentity()
    {
        $this->object->saveObjectIdentity();
    }

    /**
     * @covers Ease\Sand::restoreObjectIdentity
     * @todo   Implement testRestoreObjectIdentity().
     */
    public function testRestoreObjectIdentity()
    {
        $this->object->resetObjectIdentity();
    }

    /**
     * @covers Ease\Sand::resetObjectIdentity
     * @todo   Implement testResetObjectIdentity().
     */
    public function testResetObjectIdentity()
    {
        $this->object->resetObjectIdentity();
    }

    /**
     * @covers Ease\Sand::divDataArray
     */
    public function testDivDataArray()
    {
        $sourceArray = [1 => 'a', 2 => 'b'];
        $destinationArray = [];
        $this->object->divDataArray($sourceArray, $destinationArray, 2);
        $this->assertEquals([2 => 'b'], $destinationArray);
    }

    /**
     * @covers Ease\Sand::dataReset
     */
    public function testDataReset()
    {
        $this->object->dataReset();
        $this->assertEmpty($this->object->getData());
    }

    /**
     * @covers Ease\Sand::setData
     */
    public function testSetData()
    {
        $data = ['a' => 1, 'b' => 2];
        $this->object->setData($data);
        $this->assertEquals($data, $this->object->getData());
    }

    /**
     * @covers Ease\Sand::getData
     */
    public function testGetData()
    {
        $data = ['a' => 1, 'b' => 2];
        $this->assertEquals($data, $this->object->getData());
    }

    /**
     * @covers Ease\Sand::getDataCount
     */
    public function testGetDataCount()
    {
        $this->assertEquals(2, $this->object->getDataCount());
    }

    /**
     * @covers Ease\Sand::getDataValue
     */
    public function testGetDataValue()
    {
        $this->assertEquals(2, $this->object->getDataValue('b'));
    }

    /**
     * @covers Ease\Sand::setDataValue
     * @todo   Implement testSetDataValue().
     */
    public function testSetDataValue()
    {
        $this->object->setDataValue('c', 3);
        $this->assertEquals(3, $this->object->getDataValue('c'));
    }

    /**
     * @covers Ease\Sand::unsetDataValue
     */
    public function testUnsetDataValue()
    {
        $this->object->unsetDataValue('a');
        $this->assertNull($this->object->getDataValue('a'));
    }

    /**
     * @covers Ease\Sand::takeData
     */
    public function testTakeData()
    {
        $data = ['d' => 4, 'e' => 5];
        $this->object->takeData($data);
        $this->assertEquals(5, $this->object->getDataValue('e'));
    }

    /**
     * @covers Ease\Sand::easeAddSlashes
     */
    public function testEaseAddSlashes()
    {
        $this->assertEquals("\'", $this->object->easeAddSlashes("'"));
    }

    /**
     * @covers Ease\Sand::printPre
     * @todo   Implement testPrintPre().
     */
    public function testPrintPre()
    {
        $this->object->printPre(['a' => 1]);
    }

    /**
     * @covers Ease\Sand::printPreBasic
     * @todo   Implement testPrintPreBasic().
     */
    public function testPrintPreBasic()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\Sand::substrUnicode
     * @todo   Implement testSubstrUnicode().
     */
    public function testSubstrUnicode()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\Sand::rip
     */
    public function testRip()
    {
        $this->assertEquals('kuprikladu', $this->object->rip("kupÅ™Ã­kladu"));
    }

    /**
     * @covers Ease\Sand::easeEncrypt
     */
    public function testEaseEncrypt()
    {
        $enc = $this->object->easeEncrypt('secret', 'key');
        $this->assertEquals(0xb70b2e5f88837b808206dfc335a5, $enc);
    }

    /**
     * @covers Ease\Sand::easeDecrypt
     */
    public function testEaseDecrypt()
    {
        $dec = $this->object->easeDecrypt(0xb70b2e5f88837b808206dfc335a5, 'key');
        $this->assertEquals('secret', $dec);
    }

    /**
     * @covers Ease\Sand::randomNumber
     */
    public function testRandomNumber()
    {
        $a = $this->object->randomNumber();
        $b = $this->object->randomNumber();
        $this->assertFalse($a == $b);
    }

    /**
     * @covers Ease\Sand::randomString
     */
    public function testRandomString()
    {
        $a = $this->object->randomString(22);
        $b = $this->object->randomString();
        $this->assertFalse($a == $b);
    }

    /**
     * @covers Ease\Sand::isEmail
     */
    public function testIsEmail()
    {
        $this->assertTrue($this->object->isEmail('vitex@hippy.cz'));
        $this->assertFalse($this->object->isEmail('lala'));
        $this->assertFalse($this->object->isEmail('@cz'));
        $this->assertFalse($this->object->isEmail('wrong@ mail'));
        $this->assertFalse($this->object->isEmail('nonexist@mail'));
    }

    /**
     * @covers Ease\Sand::recursiveIconv
     * @todo   Implement testRecursiveIconv().
     */
    public function testRecursiveIconv()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\Sand::arrayIconv
     * @todo   Implement testArrayIconv().
     */
    public function testArrayIconv()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\Sand::addToLog
     * @todo   Implement testAddToLog().
     */
    public function testAddToLog()
    {
        $this->object->addToLog('Message');
    }

    /**
     * @covers Ease\Sand::error
     * @todo   Implement testError().
     */
    public function testError()
    {
        $this->object->error('message');
    }

    /**
     * @covers Ease\Sand::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
        $this->object->__toString();
    }

    /**
     * @covers Ease\Sand::__sleep
     * @todo   Implement test__sleep().
     */
    public function test__sleep()
    {
        $this->object->__sleep();
    }

    /**
     * @covers Ease\Sand::humanFilesize
     * @todo   Implement testHumanFilesize().
     */
    public function testHumanFilesize()
    {
        $this->assertEquals('1.18 MB', $this->object->humanFilesize('1234545'));
        $this->assertEquals('11.5 GB', $this->object->humanFilesize('12345453453'));
        $this->assertEquals('1.1 PB', $this->object->humanFilesize('1234545345332235'));
    }

    /**
     * @covers Ease\Sand::__wakeup
     * @todo   Implement test__wakeup().
     */
    public function test__wakeup()
    {
        $this->object->__wakeup();
    }

}
